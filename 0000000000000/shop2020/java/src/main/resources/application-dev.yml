server:
  port: 8080
  servlet:
    context-path: /
  tomcat:
    uri-encoding: UTF-8
    max-threads: 1000
    max-connections: 20000
spring:  
  application:
      name: shop2020 
  main:
    allow-bean-definition-overriding: true
  mvc:
    view:
      prefix: /
      suffix: .jsp 
  aop:
    proxy-target-class: true
    auto: true
  #ehcache 
  cache:
    type: ehcache
    ehcache: 
      config: classpath:/ehcache.xml
  resources:
    staticLocations: classpath:/templates/,classpath:/static/page
  #==========redis 配置信息===========#
  redis:
    host: 127.0.0.1
    port: 6479
    password: 
    pool:
     max-active: 8
     max-wait: 1
     max-idle: 8
    min-idle: 0
    timeout: 1000
    #默认单个数据源的配置
  datasource:
    url: jdbc:mysql://localhost:3306/shop2020?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
    username: root
    password: yi
    driver-class-name: com.mysql.cj.jdbc.Driver
    #配置初始化大小/最小/最大
    initial-size: 1
    min-idle: 1
    max-active: 20
    #获取连接等待超时时间
    max-wait: 60000
    #间隔多久进行一次检测，检测需要关闭的空闲连接
    time-between-eviction-runs-millis: 60000
    #一个连接在池中最小生存的时间
    min-evictable-idle-time-millis: 300000
    #validation-query: SELECT 'x'
    test-while-idle: true
    test-on-borrow: false
    test-on-return: false
    #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
    pool-prepared-statements: false
    max-pool-prepared-statement-per-connection-size: 20  
#  datasource:
#    # 使用阿里的Druid连接池
#    type: com.alibaba.druid.pool.DruidDataSource
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    # 填写你数据库的url、登录名、密码和数据库名
#    url: jdbc:mysql://localhost:3306/shop2020?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=false&allowMultiQueries=true
#    username: root
#    password: yi
#    druid:
#      # 连接池的配置信息
#      # 初始化大小，最小，最大
#      initial-size: 5
#      min-idle: 5
#      maxActive: 20
#      # 配置获取连接等待超时的时间
#      maxWait: 60000
#      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#      timeBetweenEvictionRunsMillis: 60000
#      # 配置一个连接在池中最小生存的时间，单位是毫秒
#      minEvictableIdleTimeMillis: 300000
#      validationQuery: SELECT 1
#      testWhileIdle: true
#      testOnBorrow: false
#      testOnReturn: false
#      # 打开PSCache，并且指定每个连接上PSCache的大小
#      poolPreparedStatements: true
#      maxPoolPreparedStatementPerConnectionSize: 20
#      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
#      filters: stat,slf4j
#      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
#      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
#      # 配置DruidStatFilter
#      web-stat-filter:
#        enabled: true
#        url-pattern: "/*"
#        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
#      # 配置DruidStatViewServlet
#      stat-view-servlet:
#        url-pattern: "/druid/*"
#        # IP白名单(没有配置或者为空，则允许所有访问)
#        allow: 127.0.0.1,192.168.163.1
#        # IP黑名单 (存在共同时，deny优先于allow)
#        deny: 192.168.1.73
#        #  禁用HTML页面上的“Reset All”功能
#        reset-enable: false
#        # 登录名
#        login-username: admin
#        # 登录密码
#        login-password: 123456 
#  shardingsphere: 
#    # 默认数据库 
#    datasource:
#      #读写分离*配置真实数据源
#      names: master0,slave0
#      master0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:13306/shop2020?nullNamePatternMatchesAll=true&tinyInt1isBit=false&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true
#        username: root
#        password: yi
#        filters: stat,log4j
#        maxActive: 20
#        initialSize: 1
#        maxWait: 60000
#        minIdle: 1
#        timeBetweenEvictionRunsMillis: 60000
#        minEvictableIdleTimeMillis: 300000
#        validationQuery: select 'x'
#        testWhileIdle: true
#        testOnBorrow: false
#        testOnReturn: false
#        poolPreparedStatements: true
#        maxOpenPreparedStatements: 20
#        connection-properties: druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000
#      slave0:
#        type: com.alibaba.druid.pool.DruidDataSource
#        driver-class-name: com.mysql.cj.jdbc.Driver
#        url: jdbc:mysql://localhost:13307/shop2020?nullNamePatternMatchesAll=true&tinyInt1isBit=false&useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&useSSL=false&allowMultiQueries=true
#        username: root
#        password: yi
#        filters: stat,log4j
#        maxActive: 20
#        initialSize: 1
#        maxWait: 60000
#        minIdle: 1
#        timeBetweenEvictionRunsMillis: 60000
#        minEvictableIdleTimeMillis: 300000
#        validationQuery: select 'x'
#        testWhileIdle: true
#        testOnBorrow: false
#        testOnReturn: false
#        poolPreparedStatements: true
#        maxOpenPreparedStatements: 20
#        connection-properties: druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000
#    sharding:
#      default-database-strategy:
#         none:
#          sharding-column: none 
#      tables: 
#         t_system_log:
#          logic-table: t_system_log #sql中的表名称 
#          actual-data-nodes: master0.t_system_log_202003,master0.t_system_log_202004
#          table-strategy:   
#          #标准分片
#            standard: 
#              sharding-column: dateline
#              # 精准分片算法
#              precise-algorithm-class-name: com.shuogesha.datasource.LogMonthPreciseShardingStrategy
#              range-algorithm-class-name: com.shuogesha.datasource.LogMonthPreciseShardingStrategy
#      master-slave-rules:   
#         master0:
#          name: master0
#          master-data-source-name: master0
#          slave-data-source-names: slave0 #方便测试没做主从复制
#           ## 配置从库选择策略，提供轮询与随机，这里选择用轮询 ROUND_ROBIN(轮询)，RANDOM（随机）
#          load-balance-algorithm-type: round_robin 
#    masterslave:
#        ## 配置从库选择策略，提供轮询与随机，这里选择用轮询 ROUND_ROBIN(轮询)，RANDOM（随机）
#       load-balance-algorithm-type: round_robin
#       #最终的数据源名称 注意开启后sharding将时效，谨慎操作
##       name: master0
#       master-data-source-name: master0
#       slave-data-source-names: slave0 #方便测试没做主从复制
#    props:
#      sql:
#      # 开启SQL显示，默认值: false，注意：仅配置读写分离时不会打印日志
#        show: true
#      check:
#        table:
#          metadata:
#            # 是否在启动时检查分表元数据一致性
#            enabled: false 
  #定时调度任务
  quartz:
    #相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            instanceName: quartzScheduler
            instanceId: AUTO
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_
            isClustered: true
            clusterCheckinInterval: 20000
            useProperties: false
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            threadCount: 10
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
          dataSource: 
            myDS:
              driver: com.mysql.cj.jdbc.Driver
              connectionProvider:
                class: com.shuogesha.scheduler.DruidConnectionProvider
              URL: jdbc:mysql://localhost:3306/base2020?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=false
              user: root
              password: yi
              maxConnection: 5
    #数据库方式
    job-store-type: jdbc
    #初始化表结构
    #jdbc:
      #initialize-schema: never 
  servlet:
      multipart:
        enabled: true
        max-file-size: 20MB
        max-request-size: 20MB 
  rabbitmq:
      host: 127.0.0.1
      port: 5672
      username: admin
      password: admin
      virtual-host: my_vhost
      publisher-confirm-type: correlated #必须配置这个才会确认回调
      publisher-returns: true
      listener:
        type: simple
        simple:
          auto-startup: true #消费者自动启动
          acknowledge-mode: manual #手动确认
          prefetch: 50 #限制每次发送条数据。
          concurrency: 10 #同一个队列启动几个消费者
          max-concurrency: 20 #启动消费者最大数量
          #重试策略相关配置
          retry:
            enabled: true #是否支持重试
            max-attempts: 5
            stateless: false
            #时间策略乘数因子
            multiplier: 1.0
            initial-interval: 1000ms
            max-interval: 10000ms
          default-requeue-rejected: true #消费失败，自动重新入队
 ##图片临时路径
#文件上传目录(window是d/e/f盘， linux是/)（注意Linux和Windows上的目录结构不同）
file:
  uploadFolder: /Users/zhaohaiyuan/Downloads/upload/
#静态资源对外暴露的访问路径(访问图片的路径)
  staticAccessPath: /upload/** 
#配置Mybatis
mybatis:
  type-aliases-package: com.shuogesha.*.entity
  mapper-locations: classpath:mapper/*.xml
  configuration:
    # 开启驼峰命名转换，如：Table(create_time) -> Entity(createTime)。不需要我们关心怎么进行字段匹配，mybatis会自动识别`大写字母与下划线`
    map-underscore-to-camel-case: true 
#打印SQL日志 
logging:
 #path: ./logs/ #打印存放日志的路径
 level:
  com.shuogesha: DEBUG #包名下日志的级别 
#==========elasticSearch 配置信息===========#
elasticsearch:
  clustername: test 
  nodes: localhost:9200
  schema: http
  max-connect-total: 50
  max-connect-per-route: 10
  connection-request-timeout-millis: 500
  socket-timeout-millis: 30000
  connect-timeout-millis: 1000
#====================================Seata Config===============================================
seata:
  enabled: true
  application-id: base2020
  tx-service-group: my_test_tx_group
  #enable-auto-data-source-proxy: true
  #use-jdk-proxy: false
  client:
    rm:
      async-commit-buffer-limit: 1000
      report-retry-count: 5
      table-meta-check-enable: false
      report-success-enable: false
      lock:
        retry-interval: 10
        retry-times: 30
        retry-policy-branch-rollback-on-conflict: true
    tm:
      commit-retry-count: 5
      rollback-retry-count: 5
    undo:
      data-validation: true
      log-serialization: jackson
      log-table: undo_log
    log:
      exceptionRate: 100
  service:
    vgroup-mapping:
      my_test_tx_group: default
    grouplist:
      default: 127.0.0.1:8091
    #enable-degrade: false
    #disable-global-transaction: false
  transport:
    shutdown:
      wait: 3
    thread-factory:
      boss-thread-prefix: NettyBoss
      worker-thread-prefix: NettyServerNIOWorker
      server-executor-thread-prefix: NettyServerBizHandler
      share-boss-worker: false
      client-selector-thread-prefix: NettyClientSelector
      client-selector-thread-size: 1
      client-worker-thread-prefix: NettyClientWorkerThread
      worker-thread-size: default
      boss-thread-size: 1
    type: TCP
    server: NIO
    heartbeat: true
    serialization: seata
    compressor: none
    enable-client-batch-send-request: true
    

    