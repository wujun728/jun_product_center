{
    "classes": [
        {
            "name": "Popper",
            "description": "",
            "extends": [],
            "access": "",
            "virtual": false,
            "fires": "",
            "constructor": {
                "name": "Popper",
                "description": "Create a new Popper.js instance",
                "parameters": [
                    {
                        "name": "reference",
                        "type": [
                            "HTMLElement"
                        ],
                        "description": "The reference element used to position the popper",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "popper",
                        "type": [
                            "HTMLElement",
                            "Object"
                        ],
                        "description": "The HTML element used as popper, or a configuration used to generate the popper.",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "popper.tagName",
                        "type": [
                            "String"
                        ],
                        "description": "The tag name of the generated popper.",
                        "default": "'div'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.classNames",
                        "type": [
                            "Array"
                        ],
                        "description": "Array of classes to apply to the generated popper.",
                        "default": "['popper']",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.attributes",
                        "type": [
                            "Array"
                        ],
                        "description": "Array of attributes to apply, specify `attr:value` to assign a value to it.",
                        "default": "",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.parent",
                        "type": [
                            "HTMLElement",
                            "String"
                        ],
                        "description": "The parent element, given as HTMLElement or as query string.",
                        "default": "window.document.body",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.content",
                        "type": [
                            "String"
                        ],
                        "description": "The content of the popper, it can be text, html, or node; if it is not text, set `contentType` to `html` or `node`.",
                        "default": "''",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.contentType",
                        "type": [
                            "String"
                        ],
                        "description": "If `html`, the `content` will be parsed as HTML. If `node`, it will be appended as-is.",
                        "default": "'text'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.arrowTagName",
                        "type": [
                            "String"
                        ],
                        "description": "Same as `popper.tagName` but for the arrow element.",
                        "default": "'div'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.arrowClassNames",
                        "type": [
                            "Array"
                        ],
                        "description": "Same as `popper.classNames` but for the arrow element.",
                        "default": "'popper__arrow'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "popper.arrowAttributes",
                        "type": [
                            "String"
                        ],
                        "description": "Same as `popper.attributes` but for the arrow element.",
                        "default": "['x-arrow']",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options",
                        "type": [
                            "Object"
                        ],
                        "description": "",
                        "default": "",
                        "optional": "",
                        "nullable": ""
                    },
                    {
                        "name": "options.placement",
                        "type": [
                            "String"
                        ],
                        "description": "Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -right),\n     left(-start, -end)`",
                        "default": "bottom",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.arrowElement",
                        "type": [
                            "HTMLElement",
                            "String"
                        ],
                        "description": "The DOM Node used as arrow for the popper, or a CSS selector used to get the DOM node. It must be child of\n     its parent Popper. Popper.js will apply to the given element the style required to align the arrow with its\n     reference element.\n     By default, it will look for a child node of the popper with the `x-arrow` attribute.",
                        "default": "'[x-arrow]'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.gpuAcceleration",
                        "type": [
                            "Boolean"
                        ],
                        "description": "When this property is set to true, the popper position will be applied using CSS3 translate3d, allowing the\n     browser to use the GPU to accelerate the rendering.\n     If set to false, the popper will be placed using `top` and `left` properties, not using the GPU.",
                        "default": "true",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.offset",
                        "type": [
                            "Number"
                        ],
                        "description": "Amount of pixels the popper will be shifted (can be negative).",
                        "default": "0",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.boundariesElement",
                        "type": [
                            "String",
                            "Element"
                        ],
                        "description": "The element which will define the boundaries of the popper position, the popper will never be placed outside\n     of the defined boundaries (except if `keepTogether` is enabled)",
                        "default": "'viewport'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.boundariesPadding",
                        "type": [
                            "Number"
                        ],
                        "description": "Additional padding for the boundaries",
                        "default": "5",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.preventOverflowOrder",
                        "type": [
                            "Array"
                        ],
                        "description": "Order used when Popper.js tries to avoid overflows from the boundaries, they will be checked in order,\n     this means that the last ones will never overflow",
                        "default": "['left', 'right', 'top', 'bottom']",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.flipBehavior",
                        "type": [
                            "String",
                            "Array"
                        ],
                        "description": "The behavior used by the `flip` modifier to change the placement of the popper when the latter is trying to\n     overlap its reference element. Defining `flip` as value, the placement will be flipped on\n     its axis (`right - left`, `top - bottom`).\n     You can even pass an array of placements (eg: `['right', 'left', 'top']` ) to manually specify\n     how alter the placement when a flip is needed. (eg. in the above example, it would first flip from right to left,\n     then, if even in its new placement, the popper is overlapping its reference element, it will be moved to top)",
                        "default": "'flip'",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiers",
                        "type": [
                            "Array"
                        ],
                        "description": "List of functions used to modify the data before they are applied to the popper, add your custom functions\n     to this array to edit the offsets and placement.\n     The function should reflect the @params and @returns of preventOverflow",
                        "default": "[ 'shift', 'offset', 'preventOverflow', 'keepTogether', 'arrow', 'flip', 'applyStyle']",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.modifiersIgnored",
                        "type": [
                            "Array"
                        ],
                        "description": "Put here any built-in modifier name you want to exclude from the modifiers list\n     The function should reflect the @params and @returns of preventOverflow",
                        "default": "[]",
                        "optional": true,
                        "nullable": ""
                    },
                    {
                        "name": "options.removeOnDestroy",
                        "type": [
                            "Boolean"
                        ],
                        "description": "Set to true if you want to automatically remove the popper when you call the `destroy` method.",
                        "default": "false",
                        "optional": true,
                        "nullable": ""
                    }
                ],
                "examples": []
            },
            "functions": [
                {
                    "name": "destroy",
                    "access": "",
                    "virtual": false,
                    "description": "Destroy the popper",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "update",
                    "access": "",
                    "virtual": false,
                    "description": "Updates the position of the popper, computing the new offsets and applying the new style",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "onCreate",
                    "access": "",
                    "virtual": false,
                    "description": "If a function is passed, it will be executed after the initialization of popper with as first argument the Popper instance.",
                    "parameters": [
                        {
                            "name": "callback",
                            "type": [
                                "function"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "onUpdate",
                    "access": "",
                    "virtual": false,
                    "description": "If a function is passed, it will be executed after each update of popper with as first argument the set of coordinates and informations\nused to style popper and its arrow.\nNOTE: it doesn't get fired on the first call of the `Popper.update()` method inside the `Popper` constructor!",
                    "parameters": [
                        {
                            "name": "callback",
                            "type": [
                                "function"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "parse",
                    "access": "",
                    "virtual": false,
                    "description": "Helper used to generate poppers from a configuration file",
                    "parameters": [
                        {
                            "name": "config",
                            "type": [
                                "Object"
                            ],
                            "description": "configuration",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": [
                            "HTMLElement"
                        ],
                        "description": "popper"
                    }
                },
                {
                    "name": "_getPosition",
                    "access": "",
                    "virtual": false,
                    "description": "Helper used to get the position which will be applied to the popper",
                    "parameters": [
                        {
                            "name": "config",
                            "type": [
                                "HTMLElement"
                            ],
                            "description": "popper element",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": [
                            "HTMLElement"
                        ],
                        "description": "reference element"
                    }
                },
                {
                    "name": "_getOffsets",
                    "access": "private",
                    "virtual": false,
                    "description": "Get offsets to the popper",
                    "parameters": [
                        {
                            "name": "popper",
                            "type": [
                                "Element"
                            ],
                            "description": "the popper element",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "reference",
                            "type": [
                                "Element"
                            ],
                            "description": "the reference element (the popper will be relative to this)",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": [
                            "Object"
                        ],
                        "description": "An object containing the offsets which will be applied to the popper"
                    }
                },
                {
                    "name": "_setupEventListeners",
                    "access": "private",
                    "virtual": false,
                    "description": "Setup needed event listeners used to update the popper position",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_removeEventListeners",
                    "access": "private",
                    "virtual": false,
                    "description": "Remove event listeners used to update the popper position",
                    "parameters": [],
                    "examples": []
                },
                {
                    "name": "_getBoundaries",
                    "access": "private",
                    "virtual": false,
                    "description": "Computed the boundaries limits and return them",
                    "parameters": [
                        {
                            "name": "data",
                            "type": [
                                "Object"
                            ],
                            "description": "Object containing the property \"offsets\" generated by `_getOffsets`",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "padding",
                            "type": [
                                "Number"
                            ],
                            "description": "Boundaries padding",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "boundariesElement",
                            "type": [
                                "Element"
                            ],
                            "description": "Element used to define the boundaries",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": [],
                    "returns": {
                        "type": [
                            "Object"
                        ],
                        "description": "Coordinates of the boundaries"
                    }
                },
                {
                    "name": "runModifiers",
                    "access": "public",
                    "virtual": false,
                    "description": "Loop trough the list of modifiers and run them in order, each of them will then edit the data object",
                    "parameters": [
                        {
                            "name": "data",
                            "type": [
                                "Object"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "modifiers",
                            "type": [
                                "Array"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        },
                        {
                            "name": "ends",
                            "type": [
                                "function"
                            ],
                            "description": "",
                            "default": "",
                            "optional": "",
                            "nullable": ""
                        }
                    ],
                    "examples": []
                },
                {
                    "name": "isModifierRequired",
                    "access": "",
                    "virtual": false,
                    "description": "Helper used to know if the given modifier depends from another one.",
                    "parameters": [],
                    "examples": [],
                    "returns": {
                        "type": [
                            "Boolean"
                        ],
                        "description": ""
                    }
                }
            ],
            "namespaces": [
                {
                    "name": "modifiers",
                    "description": "Modifiers list",
                    "access": "",
                    "virtual": false,
                    "functions": [
                        {
                            "name": "Popper#modifiers.applyStyle",
                            "access": "",
                            "virtual": false,
                            "description": "Apply the computed styles to the popper element",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by `update` method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The same data object"
                            }
                        },
                        {
                            "name": "Popper#modifiers.shift",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to shift the popper on the start or end of its reference element side",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by `update` method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        },
                        {
                            "name": "Popper#modifiers.preventOverflow",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to make sure the popper does not overflows from it's boundaries",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by `update` method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        },
                        {
                            "name": "Popper#modifiers.keepTogether",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to make sure the popper is always near its reference",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by _update method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        },
                        {
                            "name": "Popper#modifiers.flip",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to flip the placement of the popper when the latter is starting overlapping its reference element.\nRequires the `preventOverflow` modifier before it in order to work.\n**NOTE:** This modifier will run all its previous modifiers everytime it tries to flip the popper!",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by _update method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        },
                        {
                            "name": "Popper#modifiers.offset",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to add an offset to the popper, useful if you more granularity positioning your popper.\nThe offsets will shift the popper on the side of its reference element.",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by _update method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        },
                        {
                            "name": "Popper#modifiers.arrow",
                            "access": "",
                            "virtual": false,
                            "description": "Modifier used to move the arrows on the edge of the popper to make sure them are always between the popper and the reference element\nIt will use the CSS outer size of the arrow element to know how many pixels of conjuction are needed",
                            "parameters": [
                                {
                                    "name": "data",
                                    "type": [
                                        "Object"
                                    ],
                                    "description": "The data object generated by _update method",
                                    "default": "",
                                    "optional": "",
                                    "nullable": ""
                                }
                            ],
                            "examples": [],
                            "returns": {
                                "type": [
                                    "Object"
                                ],
                                "description": "The data object, properly modified"
                            }
                        }
                    ]
                }
            ]
        }
    ]
}
