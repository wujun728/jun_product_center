package ${package}.controller;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.util.CollectionUtils;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.extern.slf4j.Slf4j;
import java.util.List;
import com.jun.plugin.system.common.utils.DataResult;
import com.jun.plugin.common.aop.annotation.DataScope;
import com.jun.plugin.module.flow.process.BaseFlowController;

import ${package}.entity.${className}Entity;
import ${package}.mapper.${className}Mapper;
import ${package}.service.${className}Service;



/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/")
@Slf4j
public class ${className}Controller  extends BaseFlowController{

    @Autowired
    private ${className}Service ${classname}Service;

    @Autowired
    private ${className}Mapper ${classname}Mapper;


    /**
    * 跳转到页面
    */
    @GetMapping("/index/${classname}")
    public String ${classname}() {
        return "${classNameLower}/list";
        }

    @ApiOperation(value = "新增")
    @PostMapping("${classname}/add")
    @RequiresPermissions("${classname}:add")
    @ResponseBody
    public DataResult add(@RequestBody ${className}Entity ${classname}){
    	if(this.checkExists(${classname})) {
    		return DataResult.fail("同名记录信息已存在！");
    	}
        ${classname}Service.save(${classname});
        return DataResult.success();
    }

    @ApiOperation(value = "删除")
    @DeleteMapping("${classname}/delete")
    @RequiresPermissions("${classname}:delete")
    @ResponseBody
    public DataResult delete(@RequestBody @ApiParam(value = "id集合") List<String> ids){
        ${classname}Service.removeByIds(ids);
        return DataResult.success();
    }

    @ApiOperation(value = "更新")
    @PutMapping("${classname}/update")
    @RequiresPermissions("${classname}:update")
    @ResponseBody
    public DataResult update(@RequestBody ${className}Entity ${classname}){
        ${classname}Service.updateById(${classname});
        return DataResult.success();
    }

    @ApiOperation(value = "查询分页数据")
    @PostMapping("${classname}/listByPage")
    @RequiresPermissions("${classname}:list")
    @ResponseBody
    @DataScope
    public DataResult findListByPage(@RequestBody ${className}Entity ${classname}){
        Page page = new Page(${classname}.getPage(), ${classname}.getLimit());
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //查询条件示例
        //数据权限示例， 需手动添加此条件 begin
        if (!CollectionUtils.isEmpty(${classname}.getCreateIds())) {
            queryWrapper.in(${className}Entity::getCreateId, ${classname}.getCreateIds());
        }
        //数据权限示例， 需手动添加此条件 end
        //queryWrapper.like(${className}Entity::getId, ${classname}.getId()==null?"":${classname}.getId());
        IPage<${className}Entity> iPage = ${classname}Service.page(page, queryWrapper);
        //关联流程查询待办、处理人、状态 
        List<${className}Entity> records = iPage.getRecords();
        records.forEach(item -> {
			if((item.getOrderId()!=null && item.getOrderId().length()>0) && (item.getOrderStatus()==null)) {
				this.setFlowStatusInfo(item);
				System.err.println(item.getOrderStatus());
				if(item.getOrderState()==0) {
					if((item.getOrderStatus()==null || item.getOrderStatus()!=0)) {
						item.setOrderStatus(item.getOrderState());
						${classname}Service.updateById(item);
					}
				}
			}else {
				item.setOrderState(item.getOrderStatus());
			}

		});
        return DataResult.success(iPage);
    }
    

    @ApiOperation(value = "查询下拉列表数据")
    @PostMapping("${classname}/listBySelect")
    @ResponseBody
    @DataScope
    public DataResult listBySelect(@RequestBody ${className}Entity ${classname}){
        Page page = new Page(${classname}.getPage(), ${classname}.getLimit());
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //数据权限示例， 需手动添加此条件 begin
        if (!CollectionUtils.isEmpty(${classname}.getCreateIds())) {
            queryWrapper.in(${className}Entity::getCreateId, ${classname}.getCreateIds());
        }
        //数据权限示例， 需手动添加此条件 end
        //查询条件示例
        //queryWrapper.like(${className}Entity::getId, ${classname}.getId());
        IPage<${className}Entity> iPage = ${classname}Service.page(page, queryWrapper);
        return DataResult.success(iPage);
    }
    
    @ApiOperation(value = "查询单条数据")
    @PostMapping("${classname}/findOne")
    @ResponseBody
    public DataResult findOne(@RequestBody ${className}Entity ${classname}){
    	LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
    	//查询条件示例
    	//queryWrapper.eq(${className}Entity::getId, ${classname}.getId());
    	//${className}Entity one = ${classname}Service.getOne(queryWrapper);
    	${className}Entity one = ${classname}Service.getById(${classname}.getId());
    	return DataResult.success(one);
    }

    @ApiOperation(value = "查询下拉框数据")
    @PostMapping("${classname}/findListBySelect")
    @ResponseBody
    @DataScope
    public DataResult findListBySelect(@RequestBody ${className}Entity ${classname}){
        Page page = new Page(${classname}.getPage(), ${classname}.getLimit());
        LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
        //查询条件示例
        //数据权限示例， 需手动添加此条件 begin
        if (!CollectionUtils.isEmpty(${classname}.getCreateIds())) {
            queryWrapper.in(${className}Entity::getCreateId, ${classname}.getCreateIds());
        }
        //数据权限示例， 需手动添加此条件 end
        //queryWrapper.like(${className}Entity::getId, ${classname}.getId());
        IPage<${className}Entity> iPage = ${classname}Service.page(page, queryWrapper);
        log.info("\n this.${classname}Mapper.selectCountUser()="+this.${classname}Mapper.selectCountUser());
        return DataResult.success(iPage);
    }
    
    @PostMapping("${classname}/checkExists")
    @ResponseBody
    public Boolean checkExists(@RequestBody ${className}Entity ${classname}){
    	LambdaQueryWrapper<${className}Entity> queryWrapper = Wrappers.lambdaQuery();
    	queryWrapper.eq(${className}Entity::getId, ${classname}.getId());// 这里换成自己查询的关键条件
    	${className}Entity one = ${classname}Service.getOne(queryWrapper.last("LIMIT 1"));
    	if(one == null) {
    		return false;
    	}else {
    		return true;
    	}
    }

}
